logs:
  show_access_logs: true
  access_logs_fields:
  - ${REQUEST:method}
  - ${REQUEST:host}
  - ${REQUEST:path}
  - ${REQUEST:proto}
  - ${REQUEST:referer}

  - ${REQUEST_HEADER:user-agent}
  - ${REQUEST_HEADER:x-forwarded-for}
  - ${REQUEST_HEADER:x-real-ip}

  - ${RESPONSE_HEADER:content-length}
  - ${RESPONSE_HEADER:content-type}

  - ${EXTRA:request-id}
  - ${EXTRA:hashkey}
  - ${EXTRA:backend}
  

proxies:
  - name: varnish

    listener:
      port: 8080
      address: 0.0.0.0

    backends:
      synchronization: 10s

      # ATTENTION:
      # When the healthchecks are configured, related server is automatically 
      # added (and removed) to the hashring. 
      # During backend outages, this mechanism decreases the latency of responses at the 
      # cost of decreasing the hashring consistency (the router doesn't waste time trying backends in order). 
      # This being said, consider your use case

      static:
        - name: varnish-01
          host: 127.0.0.1:8081
          # (Optional) Healthcheck configuration. 
          #healthcheck:
          #  timeout: 1s
          #  retries: 3
          #  path: /health

        - name: varnish-02
          host: 127.0.0.1:8082
          # (Optional) Healthcheck configuration 
          # healthcheck:
          #   timeout: 1s
          #   retries: 3
          #   path: /health

        - name: varnish-03
          host: 127.0.0.1:8083

      dns:
        name: varnish-service
        domain: example.com
        port: 80
        # (Optional) Healthcheck configuration 
        # healthcheck:
        #   timeout: 1s
        #   retries: 3
        #   path: /health

    hash_key:

      # Key to generate a hash from the request. It can be composed using any of the following:
      # ${REQUEST:scheme}, ${REQUEST:host}, ${REQUEST:port}, ${REQUEST:path}, ${REQUEST:query}
      # ${REQUEST:method}, ${REQUEST:proto}
      pattern: "${REQUEST:path}"

    # Aditional options such as hashing mode or TTL
    options:
      protocol: http

      # (optional) Time in milliseconds to close connection trial 
      # to the backend and consider it unavailable
      backend_connect_timeout_ms: 40

      # (optional) Hashring always assigns the same backend to the hashkey.
      # If the backend is down, you can try another backend until exaushting all of them
      # by enabling this option
      try_another_backend_on_failure: true