common:
  logs:
    show_access_logs: true
    enable_request_body_logs: false
    access_logs_fields:
    - ${REQUEST:method}
    - ${REQUEST:host}
    - ${REQUEST:path}
    - ${REQUEST:proto}
    - ${REQUEST:referer}

    # Additionally, body can be logged too.
    # Please, be extremely careful when doing it: could be giant
    # For having content in this field, following flag must be enabled: common.logs.enable_request_body_logs
    - ${REQUEST:body}

    - ${REQUEST_HEADER:user-agent}
    - ${REQUEST_HEADER:x-forwarded-for}
    - ${REQUEST_HEADER:x-real-ip}

    - ${RESPONSE_HEADER:content-length}
    - ${RESPONSE_HEADER:content-type}

    - ${EXTRA:request-id}
    - ${EXTRA:hashkey}
    - ${EXTRA:backend}

proxies:
  - name: varnish

    listener:
      port: 8080
      address: 0.0.0.0

    backends:
      synchronization: 10s

      # ATTENTION:
      # When the healthchecks are configured, related server is automatically
      # added (and removed) to the hashring.
      # During backend outages, this mechanism decreases the latency of responses at the
      # cost of decreasing the hashring consistency (the router doesn't waste time trying backends in order).
      # This being said, consider your use case

      static:
        - name: varnish-01
          host: 127.0.0.1:8081
          # (Optional) Healthcheck configuration.
          #healthcheck:
          #  timeout: 1s
          #  retries: 3
          #  path: /health

        - name: varnish-02
          host: 127.0.0.1:8082
          # (Optional) Healthcheck configuration
          # healthcheck:
          #   timeout: 1s
          #   retries: 3
          #   path: /health

        - name: varnish-03
          host: 127.0.0.1:8083

      dns:
        name: varnish-service
        domain: example.com
        port: 80
        # (Optional) Healthcheck configuration
        # healthcheck:
        #   timeout: 1s
        #   retries: 3
        #   path: /health

    hash_key:

      # Key to generate a hash used to route consistently to the same backend over requests.
      # It can be composed using headers-based key such as: ${REQUEST_HEADER:<your-header>}
      # Or using any of the following:
      # ${REQUEST:scheme}, ${REQUEST:host}, ${REQUEST:port}, ${REQUEST:path}, ${REQUEST:query}
      # ${REQUEST:method}, ${REQUEST:proto}

      pattern: "${REQUEST_HEADER:<your-header>}${REQUEST:path}"

    # Aditional options such as hashing mode or TTL
    options:
      protocol: http

      # (optional) Maximum time in milliseconds to read the request from the client.
      # (default: 0ms [no timeout])
      http_server_read_timeout_ms: 0

      # (optional) Maximum time in milliseconds to write the response to the client.
      # (default: 0ms [no timeout])
      http_server_write_timeout_ms: 0

      # (optional) Disable keep alives on the server.
      # (default: false)
      http_server_disable_keep_alives: false

      # (optional) Maximum time in milliseconds to wait for the entire backend request to complete,
      # including both connection and data transfer.
      # If the request takes longer than this timeout, it will be aborted.
      # (default: 0ms [no timeout])
      http_backend_request_timeout_ms: 0

      # (optional) Maximum time in milliseconds to establish a connection with the backend.
      # If the dial takes longer than this timeout, it will be aborted.
      # (default: 0ms [no timeout])
      http_backend_dial_timeout_ms: 0

      # (optional) Time between keep-alive messages on established connection to the backend.
      # (default: 15s)
      http_backend_keep_alive_ms: 15000

      # (optional) Disable keep alives to the backend.
      # (default: false)
      http_backend_disable_keep_alives: false

      # (optional) Hashring always assigns the same backend to the hashkey.
      # If the backend is down, you can try another backend until exaushting all of them
      # by enabling this option
      try_another_backend_on_failure: true
